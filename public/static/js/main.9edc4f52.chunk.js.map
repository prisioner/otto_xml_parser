{"version":3,"sources":["components/MainMenu.js","helpers/routes.js","components/InvoicePage.js","routes/Invoice.js","routes/Invoices.js","components/InvoicesPage.js","components/ParcelPage.js","routes/Parcel.js","routes/Parcels.js","components/ParcelsPage.js","routes/index.js","routes/Main.js","routes/Contacts.js","components/ContactsPage.js","routes/NotFound.js","components/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["MainMenu","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","className","Item","to","InvoicePage","invoiceOperationNumber","Row","Col","path","id","invoicePath","exact","strict","render","match","params","component","ParcelPage","parcelCode","parcelPath","MainPage","Invoice","Invoices","Parcel","Parcels","href","target","App","routes","map","route","key","RouteWithSubroutes","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAsBeA,EAjBE,WACf,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,mBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUD,UAAU,YAAW,kBAAC,IAAD,CAASE,GCZpB,KDYW,SAC/B,kBAACH,EAAA,EAAIE,KAAL,CAAUD,UAAU,YAAW,kBAAC,IAAD,CAASE,GCThB,aDSO,aAC/B,kBAACH,EAAA,EAAIE,KAAL,CAAUD,UAAU,YAAW,kBAAC,IAAD,CAASE,GCZjB,YDYQ,YAC/B,kBAACH,EAAA,EAAIE,KAAL,CAAUD,UAAU,YAAW,kBAAC,IAAD,CAASE,GCVhB,aDUO,iB,gBEF1BC,EAVK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,uBACrB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wCAAcF,MCHP,GACbG,KFFyB,eAACC,EAAD,uDAAM,MAAN,0BAA6BA,GEEhDC,GACNC,OAAO,EACPC,QAAQ,EACRC,OAAQ,YAAgB,IAAbC,EAAY,EAAZA,MACT,OACE,kBAAC,EAAD,CAAaT,uBAAwBS,EAAMC,OAAON,OCPzC,GACbD,KHAgC,YGChCQ,UCFmB,WACnB,OACE,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,2CDDNI,OAAO,EACPC,QAAQ,GEMKK,EAVI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,OACE,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uCAAaW,MCHN,GACbV,KNJwB,eAACC,EAAD,uDAAM,MAAN,yBAA4BA,GMI9CU,GACNR,OAAO,EACPC,QAAQ,EACRC,OAAQ,YAAgB,IAAbC,EAAY,EAAZA,MACT,OACE,kBAAC,EAAD,CAAYI,WAAYJ,EAAMC,OAAON,OCP5B,GACbD,KPF+B,WOG/BQ,UCFkB,WAClB,OACE,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0CDDNI,OAAO,EACPC,QAAQ,G,QECK,GCLA,CACbJ,KVJ4B,IUK5BQ,U,OAAWI,EACXT,OAAO,EACPC,QAAQ,GDCYS,EAASC,EAAUC,EAAQC,EELlC,CACbhB,KXCgC,YWAhCQ,UCFmB,WACnB,OACE,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wCACA,2BACE,uBAAGkB,KAAK,kCAAkCC,OAAO,UAAjD,eCPK,CACbV,UCDmB,WACnB,OACE,sDCgBWW,EAbH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACIC,EAAOC,KAAI,SAACC,EAAOC,GAAR,OARI,SAACD,EAAOC,GAAR,OAAgB,kBAAC,IAAD,eAAOA,IAAKA,GAAUD,IAQ1BE,CAAmBF,EAAOC,UCD7CE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCZNuB,IAASxB,OAAO,kBAAC,EAAD,MAASyB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9edc4f52.chunk.js","sourcesContent":["import React from \"react\"\nimport { NavLink } from \"react-router-dom\"\nimport { mainPath, parcelsPath, invoicesPath, contactsPath } from \"../helpers/routes\"\nimport { Nav, Navbar } from \"react-bootstrap\"\n\nconst MainMenu = () => {\n  return(\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand>XML Parser</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Item className=\"nav-link\"><NavLink to={mainPath()}>Main</NavLink></Nav.Item>\n          <Nav.Item className=\"nav-link\"><NavLink to={invoicesPath()}>Invoices</NavLink></Nav.Item>\n          <Nav.Item className=\"nav-link\"><NavLink to={parcelsPath()}>Parcels</NavLink></Nav.Item>\n          <Nav.Item className=\"nav-link\"><NavLink to={contactsPath()}>Contacts</NavLink></Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default MainMenu\n","export const mainPath = () => \"/\"\nexport const parcelPath = (id = \":id\") => `/parcels/${id}`\nexport const parcelsPath = () => \"/parcels\"\nexport const invoicePath = (id = \":id\") => `/invoices/${id}`\nexport const invoicesPath = () => \"/invoices\"\nexport const contactsPath = () => \"/contacts\"\n","import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst InvoicePage = ({ invoiceOperationNumber }) => {\n  return(\n    <Row>\n      <Col>\n        <h3>Invoice #{invoiceOperationNumber}</h3>\n      </Col>\n    </Row>\n  )\n}\n\nexport default InvoicePage\n","import React from \"react\"\nimport { invoicePath } from \"../helpers/routes\"\nimport InvoicePage from \"../components/InvoicePage\"\n\nexport default {\n  path: invoicePath(),\n  exact: true,\n  strict: true,\n  render: ({ match }) => {\n    return (\n      <InvoicePage invoiceOperationNumber={match.params.id} />\n    )\n  }\n}\n","import { invoicesPath } from \"../helpers/routes\"\nimport InvoicesPage from \"../components/InvoicesPage\"\n\nexport default {\n  path: invoicesPath(),\n  component: InvoicesPage,\n  exact: true,\n  strict: true,\n}\n","import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst InvoicesPage = () => {\n  return(\n    <Row>\n      <Col>\n        <h3>Invoices</h3>\n      </Col>\n    </Row>\n  )\n}\n\nexport default InvoicesPage\n","import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst ParcelPage = ({ parcelCode }) => {\n  return(\n    <Row>\n      <Col>\n        <h3>Parcel #{parcelCode}</h3>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ParcelPage\n","import React from \"react\"\nimport { parcelPath } from \"../helpers/routes\"\nimport ParcelPage from \"../components/ParcelPage\"\n\nexport default {\n  path: parcelPath(),\n  exact: true,\n  strict: true,\n  render: ({ match }) => {\n    return (\n      <ParcelPage parcelCode={match.params.id} />\n    )\n  }\n}\n","import { parcelsPath } from \"../helpers/routes\"\nimport ParcelsPage from \"../components/ParcelsPage\"\n\nexport default {\n  path: parcelsPath(),\n  component: ParcelsPage,\n  exact: true,\n  strict: true,\n}\n","import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst ParcelsPage = () => {\n  return(\n    <Row>\n      <Col>\n        <h3>Parcels</h3>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ParcelsPage\n","import Invoice from \"./Invoice\"\nimport Invoices from \"./Invoices\"\nimport Parcel from \"./Parcel\"\nimport Parcels from \"./Parcels\"\nimport Main from \"./Main\"\nimport Contacts from \"./Contacts\"\nimport NotFound from \"./NotFound\"\n\nexport default [Main, Invoice, Invoices, Parcel, Parcels, Contacts, NotFound]\n","import { mainPath } from \"../helpers/routes\"\nimport MainPage from \"../components/MainPage\"\n\nexport default {\n  path: mainPath(),\n  component: MainPage,\n  exact: true,\n  strict: true,\n}\n","import { contactsPath } from \"../helpers/routes\"\nimport ContactsPage from \"../components/ContactsPage\"\n\nexport default {\n  path: contactsPath(),\n  component: ContactsPage,\n}\n","import React from \"react\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst ContactsPage = () => {\n  return(\n    <Row>\n      <Col>\n        <h3>Contacts</h3>\n        <p>\n          <a href=\"https://prisioner.github.io/cv/\" target=\"_blank\">Github</a>\n        </p>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ContactsPage\n","import NotFoundPage from \"../components/NotFoundPage\"\n\nexport default {\n  component: NotFoundPage,\n}\n","import React from \"react\"\n\nconst NotFoundPage = () => {\n  return(\n    <h1>404: Page not found</h1>\n  )\n}\n\nexport default NotFoundPage\n","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport MainMenu from \"./components/MainMenu\"\nimport routes from \"./routes\"\n\nconst RouteWithSubroutes = (route, key) => <Route key={key} { ...route } />\n\nconst App = () => {\n  return (\n    <Router>\n      <Fragment>\n        <MainMenu />\n        <Switch>\n          { routes.map((route, key) => RouteWithSubroutes(route, key)) }\n        </Switch>\n      </Fragment>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}